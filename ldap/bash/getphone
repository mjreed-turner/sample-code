#!/usr/bin/env bash
# Utility functions for accessing AD from the shell. Requires the OpenLDAP
# command-line tools (ldapsearch, etc.)

# Demonstration code
main() {

  # need username to look up
  (( $# != 1 )) && die "Usage: $0 username"

   # Get the LDAP URL from the environment, or default to known value
   : "${AD_LDAP_URL:=ldap://ldap.turner.com}"

   # No defaults for credentials
   [[ -z $AD_LDAP_BIND_DN       ]] && die "$0: AD_LDAP_BIND_DN must be set."
   [[ -z $AD_LDAP_BIND_PASSWORD ]] && die "$0: AD_LDAP_BIND_PASSWORD must be set."

   ad_ldap search -b cn=users,dc=turner,dc=com "samaccountname=$1" telephonenumber |
     sed -n 's/^telephoneNumber: //p'
}

die() {
  printf >&2 '%s\n' "$*"
  exit 1
}

ad_ldap () {
  # generic front-end helper function; first argument is the name of the command to run,
  # minus the 'ldap' part. Requires credentials to be set in environment variables.
  local exe=ldap$1
  shift

  type -P "$exe" >/dev/null || {
    printf >&2 "%s: %s: command not found" "$0" "$exe"
    return 1
  }

  # building up the command as an array is just so I can add comments to each
  # component
  local cmd=("$exe" 
    -H "$AD_LDAP_URL"               # URL to connect to
    -ZZ                             # make TLS negotiation mandatory
    -x                              # use basic user/pass auth for bind
    -D "$AD_LDAP_BIND_DN"           # bind as this user
    -w "$AD_LDAP_BIND_PASSWORD"     # with this password
    "$@")                            # add rest of the arguments

  # The LDAPTLS_REQCERT envar allows OpenLDAP-based commands to use SSL or TLS
  # for encryption without requiring that they be able to validate the server
  # certificate. Putting it on the command line means we just set it for the
  # duration of that one command.
  LDAPTLS_REQCERT=never "${cmd[@]}"
}

main "$@"
